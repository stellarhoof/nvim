# Hooks

snippet uct "useContext"
	React.useContext(${0})
#

snippet ur "useRef"
	React.useRef(${0})
#

snippet us "useState"
	let [${1}, ${2}] = React.useState(${0})
#

snippet cus "const useState"
	const [${1}, ${2}] = React.useState(${0})
#

snippet uc "useCallback"
	React.useCallback(() => {${0:${VISUAL}}}, [${1}])
#

snippet ue "useEffect"
	React.useEffect(() => {${0:${VISUAL}}}, [${1}])
#

snippet um "useMemo"
	React.useMemo(() => {${0:${VISUAL}}}, [${1}])
#

# TODO: lua snippet for react element
# "jsx element": {
#   "prefix": "j",
#   "body": "<${1:elementName}>\n\t$0\n</${1}>",
#   "description": "an element"
# },
# "jsx element self closed": {
#   "prefix": "jc",
#   "body": "<${1:elementName} />",
#   "description": "an element self closed"
# },
# "jsx elements map": {
#   "prefix": "jm",
#   "body": "{${1:array}.map((item) => <${2:elementName} key={item.id}>\n\t$0\n</${2}>)}",
#   "description": "an element self closed"
# },
# "jsx elements map with return": {
#   "prefix": "jmr",
#   "body": "{${1:array}.map((item) => {\n\treturn <${2:elementName} key={item.id}>\n\t$0\n</${2}>\n})}",
#   "description": "an element self closed"
# },
# "jsx element wrap selection": {
#   "prefix": "jsx wrap selection with element",
#   "body": "<${1:elementName}>\n\t{$TM_SELECTED_TEXT}\n</${1}>",
#   "description": "an element"
# }
